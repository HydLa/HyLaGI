.SUFFIXES: .o .c .cc .cpp .h .d

CC	:= clang
CXX	:= clang++
SED	:= sed
MV	:= mv
AR	:= ar
RM	:= rm
LN	:= ln

UNAME := $(shell uname)

PYTHON_CONFIG ?= python3-config
INCLUDES += `$(PYTHON_CONFIG) --embed 1> /dev/null 2> /dev/null && $(PYTHON_CONFIG) --includes --ldflags --embed || $(PYTHON_CONFIG) --includes --ldflags`

ifeq ($(UNAME),Linux)
	LIBS += -luuid

	MATHPATH ?= /usr/local/Wolfram/Mathematica/11.3
	INCLUDES += -I$(MATHPATH)/SystemFiles/Links/WSTP/DeveloperKit/Linux-x86-64/CompilerAdditions/
	LDFLAGS	 += -L$(MATHPATH)/SystemFiles/Links/WSTP/DeveloperKit/Linux-x86-64/CompilerAdditions/

	# CXX_OPT  += -Wall -std=c++2a -luuid -O -Wno-register -Wno-unused-command-line-argument -Wno-unused-variable
	CXX_OPT  += -Wall -std=c++17 -O -Wno-register -Wno-unused-command-line-argument -Wno-unused-variable
endif
ifeq ($(UNAME),Darwin)
	MATHPATH ?= /Applications/Mathematica\ 2.app/Contents
	INCLUDES += -I$(MATHPATH)/SystemFiles/Links/WSTP/DeveloperKit/MacOSX-x86-64/CompilerAdditions/
	LDFLAGS  += -L$(MATHPATH)/SystemFiles/Links/WSTP/DeveloperKit/MacOSX-x86-64/CompilerAdditions/

	CXX_OPT  += -Wall -std=c++2a -framework Foundation -Wno-unused-command-line-argument -Wno-unused-variable
endif

ARFLAGS  := cru
CXXFLAGS += $(INCLUDES) $(DEFINES) $(CXX_OPT)

SRC_DIR  += .
SRC      += $(foreach dir,$(SRC_DIR), $(wildcard $(dir)/*.c) $(wildcard $(dir)/*.cc) $(wildcard $(dir)/*.cpp)) 
OBJECT   := $(subst .c,.o,$(filter %.c,$(SRC))) \
						$(subst .cc,.o,$(filter %.cc,$(SRC))) \
						$(subst .cpp,.o,$(filter %.cpp,$(SRC)))
DEP_FILE := $(OBJECT:.o=.d)
COMPILE_COMMANDS_SRC := $(OBJECT:.o=.o.json)

.PHONY : all
all: $(DEP_PROJECTS) $(TARGET)

.PHONY : clean
clean:
	-$(RM) -fr $(TARGET) $(OBJECT) $(DEP_FILE) $(CLEAN_FILES) $(COMPILE_COMMANDS_SRC)

$(TARGET): $(DEP_OBJECTS) $(OBJECT)
ifeq ($(MAKE_TYPE),library)
	$(AR) $(ARFLAGS) $@ $(OBJECT)
	ranlib $@
else ifeq ($(UNAME),Darwin)
	# $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $(OBJECT) $(LIBS) $(LIBS_STATIC)
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $(OBJECT) $(LIBS) $(LIBS_STATIC) $(INCLUDES)
else
	# $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $(OBJECT) -Wl,-Bstatic $(LIBS_STATIC) -Wl,-Bdynamic $(LIBS)
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $(OBJECT) -Wl,-Bstatic $(LIBS_STATIC) -Wl,-Bdynamic $(LIBS) $(INCLUDES)
endif

ifneq "$(MAKECMDGOALS)" "clean"
-include $(DEP_FILE)
endif

.c.o:
	$(CC) $(CXXFLAGS) -c -o $@ $<

.cc.o .cpp.o:
	$(CXX) $(CXXFLAGS) -c -o $@ $<

.c.d .cc.d .cpp.d:
	$(CXX) $(CXXFLAGS) $(TARGET_ARCH) -M $< | \
	$(SED) 's,\($(notdir $*)\.o\) *:,$(dir $@)\1 $@: $(MAKE_INC) ,' >$@.tmp
	$(MV) $@.tmp $@

check-syntax:
	$(CXX) -o nul $(CXXFLAGS) -S ${CHK_SOURCES}
