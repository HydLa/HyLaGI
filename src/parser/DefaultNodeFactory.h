#ifndef _INCLUDED_HYDLA_PARSER_DEFAULT_NODE_FACTORY_H_
#define _INCLUDED_HYDLA_PARSER_DEFAULT_NODE_FACTORY_H_

#include "NodeFactory.h"

namespace hydla { 
namespace parser {

#define DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(NAME) \
  virtual boost::shared_ptr<hydla::symbolic_expression::NAME>            \
  create(hydla::symbolic_expression::NAME) const                   \
  { \
    return boost::make_shared<hydla::symbolic_expression::NAME>(); \
  }

class DefaultNodeFactory :  public NodeFactory
{
public:

protected:
  //定義
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(ProgramDefinition)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(ConstraintDefinition)

  //呼び出し
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(ProgramCaller)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(ConstraintCaller)
  
  //制約式
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Constraint);

  //Tell制約
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Tell)

  //Ask制約
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Ask)

  //比較演算子
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Equal)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(UnEqual)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Less)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(LessEqual)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Greater)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(GreaterEqual)

  //論理演算子
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(LogicalAnd)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(LogicalOr)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Not)

  //算術二項演算子
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Plus)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Subtract)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Times)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Divide)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Power)
  
  //算術単項演算子
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Negative)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Positive)

  //制約階層定義演算子
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Weaker)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Parallel)

  // 時相演算子
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Always)

  //微分
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Differential)
  
  //左極限
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Previous)
  
  // 関数
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Function)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(UnsupportedFunction)
  // 円周率
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Pi)
  // 自然対数の底
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(E)

  //変数・束縛変数
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Variable)

  //数字
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Number)
  
  //wada Print
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Print)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(PrintPP)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(PrintIP)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Scan)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Exit)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Abort)

  //SystemVariable
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(SVtimer)

  //True
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(True)
  // System Time
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(SymbolicT)

};


} //namespace parser
} //namespace hydla

#endif //_INCLUDED_HYDLA_PARSER_DEFAULT_NODE_FACTORY_H_
