#ifndef _INCLUDED_HYDLA_PARSER_DEFAULT_NODE_FACTORY_H_
#define _INCLUDED_HYDLA_PARSER_DEFAULT_NODE_FACTORY_H_

#include "NodeFactory.h"

namespace hydla { 
namespace parser {

#define DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(NAME) \
  virtual boost::shared_ptr<hydla::parse_tree::NAME>            \
  create(hydla::parse_tree::NAME) const                   \
  { \
    return boost::make_shared<hydla::parse_tree::NAME>(); \
  }

class DefaultNodeFactory :  public NodeFactory
{
public:

protected:
  //íËã`
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(ProgramDefinition)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(ConstraintDefinition)

  //åƒÇ—èoÇµ
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(ProgramCaller)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(ConstraintCaller)
  
  //êßñÒéÆ
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Constraint);

  //TellêßñÒ
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Tell)

  //AskêßñÒ
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Ask)

  //î‰ärââéZéq
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Equal)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(UnEqual)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Less)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(LessEqual)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Greater)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(GreaterEqual)

  //ò_óùââéZéq
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(LogicalAnd)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(LogicalOr)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Not)

  //éZèpìÒçÄââéZéq
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Plus)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Subtract)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Times)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Divide)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Power)
  
  //éZèpíPçÄââéZéq
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Negative)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Positive)

  //êßñÒäKëwíËã`ââéZéq
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Weaker)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Parallel)

  // éûëäââéZéq
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Always)

  //î˜ï™
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Differential)
  
  //ç∂ã…å¿
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Previous)
  
  // éOäpä÷êî
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Sin)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Cos)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Tan)
  // ãtéOäpä÷êî
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Asin)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Acos)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Atan)
  // â~é¸ó¶
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Pi)
  // ëŒêî
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Log)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Ln)
  // é©ëRëŒêîÇÃíÍ
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(E)
  // îCà”ÇÃï∂éöóÒ
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(ArbitraryBinary)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(ArbitraryUnary)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(ArbitraryFactor)

  //ïœêîÅEë©îõïœêî
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Variable)

  //êîéö
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Number)
  
  //wada Print
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Print)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(PrintPP)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(PrintIP)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Scan)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Exit)
  DEFAULT_NODE_FACTORY_DEFINE_NODE_CREATE_FUNC(Abort)

};


} //namespace parser
} //namespace hydla

#endif //_INCLUDED_HYDLA_PARSER_DEFAULT_NODE_FACTORY_H_
